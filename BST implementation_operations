class BST:
    def __init__(self,key):
        self.key=key
        self.lchild=None
        self.rchild=None
    def insert(self,data):
        if self.key is None:
            self.key=data
            return
        if self.key==data:
            return
        if self.key>data:
            if self.lchild:
                self.lchild.insert(data)
            else:
                self.lchild=BST(data)
        else:
            if self.rchild:
                self.rchild.insert(data)
            else:
                self.rchild=BST(data)
    def search(self,data):
        if self.key==data:
            print("key found")
            return
        if self.key<data:
            if self.rchild:
                self.rchild.search(data)
            else:
                print("node not found")
        else:
            if self.lchild:
                self.lchild.search(data)
            else:
                print("node not found")
    def inorder(self):
        if self.lchild:
            self.lchild.inorder()
        print(self.key)
        if self.rchild:
            self.rchild.inorder()

    def preorder(self):
        print(self.key)
        if self.lchild:
            self.lchild.preorder()
        if self.rchild:
            self.rchild.preorder()
    def postorder(self):
        if self.lchild:
            self.lchild.postorder()
        if self.rchild:
            self.rchild.postorder()    
        print(self.key)
    def delete(self, data):
        if self.key is None:
            print("Tree is empty, go eat and sleep")
            return None  # Return None for an empty tree

        if data < self.key:
            if self.lchild:
                self.lchild = self.lchild.delete(data)
            else:
                print("Key is not present")
        elif data > self.key:
            if self.rchild:
                self.rchild = self.rchild.delete(data)
            else:
                print("Key is not present")
        else:  # self.key == data
            if self.lchild is None:
                temp = self.rchild
                self = None
                return temp
            elif self.rchild is None:
                temp = self.lchild
                self = None
                return temp 
            else: 
                node = self.rchild 
                while node.lchild:
                    node = node.lchild
                self.key = node.key
                self.rchild = self.rchild.delete(node.key)
        return self

            
root=BST(None)
root.insert(10)
list1=[6,3,1,6,98,3,7]
for i in  list1:
    root.insert(i)
root.search(6)
print("preorder before deletion")
root.preorder()
print("preorder after deletion")
root.delete(6)
root.preorder()



